// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: example/hello/v1/hello.proto

package hellov1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EnumValidationExample_MyEnum int32

const (
	EnumValidationExample_MY_ENUM_UNSPECIFIED EnumValidationExample_MyEnum = 0
	EnumValidationExample_MY_ENUM_VALUE1      EnumValidationExample_MyEnum = 1
	EnumValidationExample_MY_ENUM_VALUE2      EnumValidationExample_MyEnum = 2
	EnumValidationExample_MY_ENUM_VALUE3      EnumValidationExample_MyEnum = 3
)

// Enum value maps for EnumValidationExample_MyEnum.
var (
	EnumValidationExample_MyEnum_name = map[int32]string{
		0: "MY_ENUM_UNSPECIFIED",
		1: "MY_ENUM_VALUE1",
		2: "MY_ENUM_VALUE2",
		3: "MY_ENUM_VALUE3",
	}
	EnumValidationExample_MyEnum_value = map[string]int32{
		"MY_ENUM_UNSPECIFIED": 0,
		"MY_ENUM_VALUE1":      1,
		"MY_ENUM_VALUE2":      2,
		"MY_ENUM_VALUE3":      3,
	}
)

func (x EnumValidationExample_MyEnum) Enum() *EnumValidationExample_MyEnum {
	p := new(EnumValidationExample_MyEnum)
	*p = x
	return p
}

func (x EnumValidationExample_MyEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumValidationExample_MyEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_example_hello_v1_hello_proto_enumTypes[0].Descriptor()
}

func (EnumValidationExample_MyEnum) Type() protoreflect.EnumType {
	return &file_example_hello_v1_hello_proto_enumTypes[0]
}

func (x EnumValidationExample_MyEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumValidationExample_MyEnum.Descriptor instead.
func (EnumValidationExample_MyEnum) EnumDescriptor() ([]byte, []int) {
	return file_example_hello_v1_hello_proto_rawDescGZIP(), []int{7, 0}
}

type FieldConstraintsExample_Status int32

const (
	FieldConstraintsExample_STATUS_UNSPECIFIED FieldConstraintsExample_Status = 0
	FieldConstraintsExample_STATUS_OK          FieldConstraintsExample_Status = 1
)

// Enum value maps for FieldConstraintsExample_Status.
var (
	FieldConstraintsExample_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_OK",
	}
	FieldConstraintsExample_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_OK":          1,
	}
)

func (x FieldConstraintsExample_Status) Enum() *FieldConstraintsExample_Status {
	p := new(FieldConstraintsExample_Status)
	*p = x
	return p
}

func (x FieldConstraintsExample_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldConstraintsExample_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_example_hello_v1_hello_proto_enumTypes[1].Descriptor()
}

func (FieldConstraintsExample_Status) Type() protoreflect.EnumType {
	return &file_example_hello_v1_hello_proto_enumTypes[1]
}

func (x FieldConstraintsExample_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FieldConstraintsExample_Status.Descriptor instead.
func (FieldConstraintsExample_Status) EnumDescriptor() ([]byte, []int) {
	return file_example_hello_v1_hello_proto_rawDescGZIP(), []int{13, 0}
}

type Hello struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hello string `protobuf:"bytes,1,opt,name=hello,proto3" json:"hello,omitempty"`
}

func (x *Hello) Reset() {
	*x = Hello{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_hello_v1_hello_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hello) ProtoMessage() {}

func (x *Hello) ProtoReflect() protoreflect.Message {
	mi := &file_example_hello_v1_hello_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hello.ProtoReflect.Descriptor instead.
func (*Hello) Descriptor() ([]byte, []int) {
	return file_example_hello_v1_hello_proto_rawDescGZIP(), []int{0}
}

func (x *Hello) GetHello() string {
	if x != nil {
		return x.Hello
	}
	return ""
}

type DisabledExample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// このバリデーションは無効化される
	Val string `protobuf:"bytes,1,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *DisabledExample) Reset() {
	*x = DisabledExample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_hello_v1_hello_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisabledExample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisabledExample) ProtoMessage() {}

func (x *DisabledExample) ProtoReflect() protoreflect.Message {
	mi := &file_example_hello_v1_hello_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisabledExample.ProtoReflect.Descriptor instead.
func (*DisabledExample) Descriptor() ([]byte, []int) {
	return file_example_hello_v1_hello_proto_rawDescGZIP(), []int{1}
}

func (x *DisabledExample) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

type OneofExample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Union:
	//
	//	*OneofExample_Val1
	//	*OneofExample_Val2
	Union isOneofExample_Union `protobuf_oneof:"union"`
}

func (x *OneofExample) Reset() {
	*x = OneofExample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_hello_v1_hello_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneofExample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneofExample) ProtoMessage() {}

func (x *OneofExample) ProtoReflect() protoreflect.Message {
	mi := &file_example_hello_v1_hello_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneofExample.ProtoReflect.Descriptor instead.
func (*OneofExample) Descriptor() ([]byte, []int) {
	return file_example_hello_v1_hello_proto_rawDescGZIP(), []int{2}
}

func (m *OneofExample) GetUnion() isOneofExample_Union {
	if m != nil {
		return m.Union
	}
	return nil
}

func (x *OneofExample) GetVal1() string {
	if x, ok := x.GetUnion().(*OneofExample_Val1); ok {
		return x.Val1
	}
	return ""
}

func (x *OneofExample) GetVal2() string {
	if x, ok := x.GetUnion().(*OneofExample_Val2); ok {
		return x.Val2
	}
	return ""
}

type isOneofExample_Union interface {
	isOneofExample_Union()
}

type OneofExample_Val1 struct {
	Val1 string `protobuf:"bytes,1,opt,name=val1,proto3,oneof"`
}

type OneofExample_Val2 struct {
	Val2 string `protobuf:"bytes,2,opt,name=val2,proto3,oneof"`
}

func (*OneofExample_Val1) isOneofExample_Union() {}

func (*OneofExample_Val2) isOneofExample_Union() {}

type StringValidationExample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConstValue    string `protobuf:"bytes,1,opt,name=const_value,json=constValue,proto3" json:"const_value,omitempty"`
	LenValue      string `protobuf:"bytes,2,opt,name=len_value,json=lenValue,proto3" json:"len_value,omitempty"`
	MinLenValue   string `protobuf:"bytes,3,opt,name=min_len_value,json=minLenValue,proto3" json:"min_len_value,omitempty"`
	MaxLenValue   string `protobuf:"bytes,4,opt,name=max_len_value,json=maxLenValue,proto3" json:"max_len_value,omitempty"`
	LenBytesValue string `protobuf:"bytes,5,opt,name=len_bytes_value,json=lenBytesValue,proto3" json:"len_bytes_value,omitempty"`
	MinBytesValue string `protobuf:"bytes,6,opt,name=min_bytes_value,json=minBytesValue,proto3" json:"min_bytes_value,omitempty"`
	MaxBytesValue string `protobuf:"bytes,7,opt,name=max_bytes_value,json=maxBytesValue,proto3" json:"max_bytes_value,omitempty"`
	PatternValue  string `protobuf:"bytes,8,opt,name=pattern_value,json=patternValue,proto3" json:"pattern_value,omitempty"`
	PrefixValue   string `protobuf:"bytes,9,opt,name=prefix_value,json=prefixValue,proto3" json:"prefix_value,omitempty"`
	// suffix_value = "Hello, World" OK
	// suffix_value = "Hello, Japan" NG
	SuffixValue string `protobuf:"bytes,10,opt,name=suffix_value,json=suffixValue,proto3" json:"suffix_value,omitempty"`
	// contains_value = "apple, banana, orange" OK
	// contains_value = "apple, orange" NG
	ContainsValue string `protobuf:"bytes,11,opt,name=contains_value,json=containsValue,proto3" json:"contains_value,omitempty"`
	// not_contains_value = "apple, banana, orange" NG
	// not_contains_value = "apple, orange" OK
	NotContainsValue string `protobuf:"bytes,12,opt,name=not_contains_value,json=notContainsValue,proto3" json:"not_contains_value,omitempty"`
	// in_value = "Go" OK
	// in_value = "Rust" NG
	InValue string `protobuf:"bytes,13,opt,name=in_value,json=inValue,proto3" json:"in_value,omitempty"`
	// not_in_value = "Go" NG
	// not_in_value = "Rust" OK
	NotInValue string `protobuf:"bytes,14,opt,name=not_in_value,json=notInValue,proto3" json:"not_in_value,omitempty"`
	// protovalidate@example.com OK
	// protovalidate.example.com NG
	EmailValue string `protobuf:"bytes,15,opt,name=email_value,json=emailValue,proto3" json:"email_value,omitempty"`
	// 127.0.0.1 NG
	// https://example.com NG
	// example.com OK
	HostnameValue string `protobuf:"bytes,16,opt,name=hostname_value,json=hostnameValue,proto3" json:"hostname_value,omitempty"`
	// 127.0.0.1 OK
	// ::192.0.2.33 OK
	// 2001:0db8:85a3:0000:0000:8a2e:0370:7334 OK
	// 255.255.255.256 NG
	IpValue string `protobuf:"bytes,17,opt,name=ip_value,json=ipValue,proto3" json:"ip_value,omitempty"`
	// 127.0.0.1 OK
	// 2001:0db8:85a3:0000:0000:8a2e:0370:7334 NG
	Ipv4Value string `protobuf:"bytes,18,opt,name=ipv4_value,json=ipv4Value,proto3" json:"ipv4_value,omitempty"`
	// 127.0.0.1 NG
	// 2001:0db8:85a3:0000:0000:8a2e:0370:7334 OK
	Ipv6Value string `protobuf:"bytes,19,opt,name=ipv6_value,json=ipv6Value,proto3" json:"ipv6_value,omitempty"`
	// https://example.com OK
	// example.com NG
	UriValue string `protobuf:"bytes,20,opt,name=uri_value,json=uriValue,proto3" json:"uri_value,omitempty"`
	// ./example.com OK
	UriRefValue string `protobuf:"bytes,21,opt,name=uri_ref_value,json=uriRefValue,proto3" json:"uri_ref_value,omitempty"`
	// 127.0.0.1 OK
	// example.com OK
	AddressValue string `protobuf:"bytes,22,opt,name=address_value,json=addressValue,proto3" json:"address_value,omitempty"`
	// 550e8400-e29b-41d4-a716-446655440000 OK
	UuidValue string `protobuf:"bytes,23,opt,name=uuid_value,json=uuidValue,proto3" json:"uuid_value,omitempty"`
	// 550e8400e29b41d4a716446655440000 OK
	TuuidValue string `protobuf:"bytes,24,opt,name=tuuid_value,json=tuuidValue,proto3" json:"tuuid_value,omitempty"`
	// 255.255.255.0/24 OK
	// 255.255.255.0 NG
	IpWithPreifxlenValue string `protobuf:"bytes,25,opt,name=ip_with_preifxlen_value,json=ipWithPreifxlenValue,proto3" json:"ip_with_preifxlen_value,omitempty"`
	// 255.255.255.0/24 OK
	// 255.255.255.0 NG
	Ipv4WithPreifxlenValue string `protobuf:"bytes,26,opt,name=ipv4_with_preifxlen_value,json=ipv4WithPreifxlenValue,proto3" json:"ipv4_with_preifxlen_value,omitempty"`
	// 2001:0db8:85a3:0000:0000:8a2e:0370:7334/24 OK
	// 2001:0db8:85a3:0000:0000:8a2e:0370:7334 NG
	Ipv6WithPreifxlenValue string `protobuf:"bytes,27,opt,name=ipv6_with_preifxlen_value,json=ipv6WithPreifxlenValue,proto3" json:"ipv6_with_preifxlen_value,omitempty"`
	// 127.0.0.0/16 OK
	// 127.0.0.1/16 NG
	IpPrefixValue string `protobuf:"bytes,28,opt,name=ip_prefix_value,json=ipPrefixValue,proto3" json:"ip_prefix_value,omitempty"`
	// 127.0.0.0/16 OK
	// 127.0.0.1/16 NG
	Ip4PrefixValue string `protobuf:"bytes,29,opt,name=ip4_prefix_value,json=ip4PrefixValue,proto3" json:"ip4_prefix_value,omitempty"`
	// 2001:db8::/48 OK
	// 2001:db8::1/48 NG
	Ip6PrefixValue string `protobuf:"bytes,30,opt,name=ip6_prefix_value,json=ip6PrefixValue,proto3" json:"ip6_prefix_value,omitempty"`
	// 127.0.0.1:8080 OK
	// 127.0.0.1 NG
	// example.com:8080 OK
	// example.com NG
	// [::1]:1234 OK
	HostAndPortValue string `protobuf:"bytes,31,opt,name=host_and_port_value,json=hostAndPortValue,proto3" json:"host_and_port_value,omitempty"`
	// KnownRegex enumを指定する
	// KNOWN_REGEX_HTTP_HEADER_NAME HTTPヘッダー名
	// KNOWN_REGEX_HTTP_HEADER_VALUE HTTPヘッダー値
	//
	// Content-Type OK
	// Content Type OK (strict = fasle)
	// Content Type NG (strict = true)
	WellKownRegexValue string `protobuf:"bytes,32,opt,name=well_kown_regex_value,json=wellKownRegexValue,proto3" json:"well_kown_regex_value,omitempty"`
}

func (x *StringValidationExample) Reset() {
	*x = StringValidationExample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_hello_v1_hello_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringValidationExample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringValidationExample) ProtoMessage() {}

func (x *StringValidationExample) ProtoReflect() protoreflect.Message {
	mi := &file_example_hello_v1_hello_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringValidationExample.ProtoReflect.Descriptor instead.
func (*StringValidationExample) Descriptor() ([]byte, []int) {
	return file_example_hello_v1_hello_proto_rawDescGZIP(), []int{3}
}

func (x *StringValidationExample) GetConstValue() string {
	if x != nil {
		return x.ConstValue
	}
	return ""
}

func (x *StringValidationExample) GetLenValue() string {
	if x != nil {
		return x.LenValue
	}
	return ""
}

func (x *StringValidationExample) GetMinLenValue() string {
	if x != nil {
		return x.MinLenValue
	}
	return ""
}

func (x *StringValidationExample) GetMaxLenValue() string {
	if x != nil {
		return x.MaxLenValue
	}
	return ""
}

func (x *StringValidationExample) GetLenBytesValue() string {
	if x != nil {
		return x.LenBytesValue
	}
	return ""
}

func (x *StringValidationExample) GetMinBytesValue() string {
	if x != nil {
		return x.MinBytesValue
	}
	return ""
}

func (x *StringValidationExample) GetMaxBytesValue() string {
	if x != nil {
		return x.MaxBytesValue
	}
	return ""
}

func (x *StringValidationExample) GetPatternValue() string {
	if x != nil {
		return x.PatternValue
	}
	return ""
}

func (x *StringValidationExample) GetPrefixValue() string {
	if x != nil {
		return x.PrefixValue
	}
	return ""
}

func (x *StringValidationExample) GetSuffixValue() string {
	if x != nil {
		return x.SuffixValue
	}
	return ""
}

func (x *StringValidationExample) GetContainsValue() string {
	if x != nil {
		return x.ContainsValue
	}
	return ""
}

func (x *StringValidationExample) GetNotContainsValue() string {
	if x != nil {
		return x.NotContainsValue
	}
	return ""
}

func (x *StringValidationExample) GetInValue() string {
	if x != nil {
		return x.InValue
	}
	return ""
}

func (x *StringValidationExample) GetNotInValue() string {
	if x != nil {
		return x.NotInValue
	}
	return ""
}

func (x *StringValidationExample) GetEmailValue() string {
	if x != nil {
		return x.EmailValue
	}
	return ""
}

func (x *StringValidationExample) GetHostnameValue() string {
	if x != nil {
		return x.HostnameValue
	}
	return ""
}

func (x *StringValidationExample) GetIpValue() string {
	if x != nil {
		return x.IpValue
	}
	return ""
}

func (x *StringValidationExample) GetIpv4Value() string {
	if x != nil {
		return x.Ipv4Value
	}
	return ""
}

func (x *StringValidationExample) GetIpv6Value() string {
	if x != nil {
		return x.Ipv6Value
	}
	return ""
}

func (x *StringValidationExample) GetUriValue() string {
	if x != nil {
		return x.UriValue
	}
	return ""
}

func (x *StringValidationExample) GetUriRefValue() string {
	if x != nil {
		return x.UriRefValue
	}
	return ""
}

func (x *StringValidationExample) GetAddressValue() string {
	if x != nil {
		return x.AddressValue
	}
	return ""
}

func (x *StringValidationExample) GetUuidValue() string {
	if x != nil {
		return x.UuidValue
	}
	return ""
}

func (x *StringValidationExample) GetTuuidValue() string {
	if x != nil {
		return x.TuuidValue
	}
	return ""
}

func (x *StringValidationExample) GetIpWithPreifxlenValue() string {
	if x != nil {
		return x.IpWithPreifxlenValue
	}
	return ""
}

func (x *StringValidationExample) GetIpv4WithPreifxlenValue() string {
	if x != nil {
		return x.Ipv4WithPreifxlenValue
	}
	return ""
}

func (x *StringValidationExample) GetIpv6WithPreifxlenValue() string {
	if x != nil {
		return x.Ipv6WithPreifxlenValue
	}
	return ""
}

func (x *StringValidationExample) GetIpPrefixValue() string {
	if x != nil {
		return x.IpPrefixValue
	}
	return ""
}

func (x *StringValidationExample) GetIp4PrefixValue() string {
	if x != nil {
		return x.Ip4PrefixValue
	}
	return ""
}

func (x *StringValidationExample) GetIp6PrefixValue() string {
	if x != nil {
		return x.Ip6PrefixValue
	}
	return ""
}

func (x *StringValidationExample) GetHostAndPortValue() string {
	if x != nil {
		return x.HostAndPortValue
	}
	return ""
}

func (x *StringValidationExample) GetWellKownRegexValue() string {
	if x != nil {
		return x.WellKownRegexValue
	}
	return ""
}

type BoolValidationExample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrueValue  bool `protobuf:"varint,1,opt,name=true_value,json=trueValue,proto3" json:"true_value,omitempty"`
	FalseValue bool `protobuf:"varint,2,opt,name=false_value,json=falseValue,proto3" json:"false_value,omitempty"`
}

func (x *BoolValidationExample) Reset() {
	*x = BoolValidationExample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_hello_v1_hello_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolValidationExample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolValidationExample) ProtoMessage() {}

func (x *BoolValidationExample) ProtoReflect() protoreflect.Message {
	mi := &file_example_hello_v1_hello_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolValidationExample.ProtoReflect.Descriptor instead.
func (*BoolValidationExample) Descriptor() ([]byte, []int) {
	return file_example_hello_v1_hello_proto_rawDescGZIP(), []int{4}
}

func (x *BoolValidationExample) GetTrueValue() bool {
	if x != nil {
		return x.TrueValue
	}
	return false
}

func (x *BoolValidationExample) GetFalseValue() bool {
	if x != nil {
		return x.FalseValue
	}
	return false
}

type BytesValidationExample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 1234 OK
	// 123 NG
	ConstValue []byte `protobuf:"bytes,1,opt,name=const_value,json=constValue,proto3" json:"const_value,omitempty"`
	// 1234 OK
	// 123 NG
	LenValue []byte `protobuf:"bytes,2,opt,name=len_value,json=lenValue,proto3" json:"len_value,omitempty"`
	// 123 OK
	// 1 NG
	MinLenValue []byte `protobuf:"bytes,3,opt,name=min_len_value,json=minLenValue,proto3" json:"min_len_value,omitempty"`
	// 12 OK
	// 123 NG
	MaxLenValue []byte `protobuf:"bytes,4,opt,name=max_len_value,json=maxLenValue,proto3" json:"max_len_value,omitempty"`
	// 0x61 (a) OK
	// 0xe3, 0x81, 0x82 (あ) NG
	PatternValue []byte `protobuf:"bytes,5,opt,name=pattern_value,json=patternValue,proto3" json:"pattern_value,omitempty"`
	// 0x01, 0x02, 0x03 OK
	// 0x01, 0x03, 0x02NG
	PrefixValue []byte `protobuf:"bytes,6,opt,name=prefix_value,json=prefixValue,proto3" json:"prefix_value,omitempty"`
	// 0x01, 0x02, 0x03 OK
	// 0x02, 0x01, 0x03 NG
	SuffixValue []byte `protobuf:"bytes,7,opt,name=suffix_value,json=suffixValue,proto3" json:"suffix_value,omitempty"`
	// 0x01, 0x02, 0x03 OK
	// 0x01, 0x03 NG
	ContainsValue []byte `protobuf:"bytes,8,opt,name=contains_value,json=containsValue,proto3" json:"contains_value,omitempty"`
	// 0x02, 0x03 OK
	// 0x01, 0x02, 0x03 NG
	InValue []byte `protobuf:"bytes,9,opt,name=in_value,json=inValue,proto3" json:"in_value,omitempty"`
	// 0x02, 0x03 NG
	// 0x01, 0x02, 0x03 OK
	NotInValue []byte `protobuf:"bytes,10,opt,name=not_in_value,json=notInValue,proto3" json:"not_in_value,omitempty"`
	// 0xFF, 0xFF, 0xFF, 0x00 (255.255.255.0) OK
	// \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00
	// \xff\xff\xff\xff\xff\x00   (::ffff:ffff:ff00) OK
	// \x01\x02 NG
	IpValue []byte `protobuf:"bytes,11,opt,name=ip_value,json=ipValue,proto3" json:"ip_value,omitempty"`
	// 0xFF, 0xFF, 0xFF, 0x00 (255.255.255.0) OK
	// \x01\x02 NG
	Ipv4Value []byte `protobuf:"bytes,12,opt,name=ipv4_value,json=ipv4Value,proto3" json:"ipv4_value,omitempty"`
	// \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00
	// \xff\xff\xff\xff\xff\x00   (::ffff:ffff:ff00) OK
	// \x01\x02 NG
	Ipv6Value []byte `protobuf:"bytes,13,opt,name=ipv6_value,json=ipv6Value,proto3" json:"ipv6_value,omitempty"`
}

func (x *BytesValidationExample) Reset() {
	*x = BytesValidationExample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_hello_v1_hello_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BytesValidationExample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytesValidationExample) ProtoMessage() {}

func (x *BytesValidationExample) ProtoReflect() protoreflect.Message {
	mi := &file_example_hello_v1_hello_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytesValidationExample.ProtoReflect.Descriptor instead.
func (*BytesValidationExample) Descriptor() ([]byte, []int) {
	return file_example_hello_v1_hello_proto_rawDescGZIP(), []int{5}
}

func (x *BytesValidationExample) GetConstValue() []byte {
	if x != nil {
		return x.ConstValue
	}
	return nil
}

func (x *BytesValidationExample) GetLenValue() []byte {
	if x != nil {
		return x.LenValue
	}
	return nil
}

func (x *BytesValidationExample) GetMinLenValue() []byte {
	if x != nil {
		return x.MinLenValue
	}
	return nil
}

func (x *BytesValidationExample) GetMaxLenValue() []byte {
	if x != nil {
		return x.MaxLenValue
	}
	return nil
}

func (x *BytesValidationExample) GetPatternValue() []byte {
	if x != nil {
		return x.PatternValue
	}
	return nil
}

func (x *BytesValidationExample) GetPrefixValue() []byte {
	if x != nil {
		return x.PrefixValue
	}
	return nil
}

func (x *BytesValidationExample) GetSuffixValue() []byte {
	if x != nil {
		return x.SuffixValue
	}
	return nil
}

func (x *BytesValidationExample) GetContainsValue() []byte {
	if x != nil {
		return x.ContainsValue
	}
	return nil
}

func (x *BytesValidationExample) GetInValue() []byte {
	if x != nil {
		return x.InValue
	}
	return nil
}

func (x *BytesValidationExample) GetNotInValue() []byte {
	if x != nil {
		return x.NotInValue
	}
	return nil
}

func (x *BytesValidationExample) GetIpValue() []byte {
	if x != nil {
		return x.IpValue
	}
	return nil
}

func (x *BytesValidationExample) GetIpv4Value() []byte {
	if x != nil {
		return x.Ipv4Value
	}
	return nil
}

func (x *BytesValidationExample) GetIpv6Value() []byte {
	if x != nil {
		return x.Ipv6Value
	}
	return nil
}

type DoubleValidationExample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 42.0 OK
	// 10.0 NG
	ConstValue float64 `protobuf:"fixed64,1,opt,name=const_value,json=constValue,proto3" json:"const_value,omitempty"`
	// 9.0 OK
	// 10.0 NG
	LtValue float64 `protobuf:"fixed64,2,opt,name=lt_value,json=ltValue,proto3" json:"lt_value,omitempty"`
	// 10.0 OK
	// 11.0 NG
	LteValue float64 `protobuf:"fixed64,3,opt,name=lte_value,json=lteValue,proto3" json:"lte_value,omitempty"`
	// 11.0 OK
	// 10.0 NG
	GtValue float64 `protobuf:"fixed64,4,opt,name=gt_value,json=gtValue,proto3" json:"gt_value,omitempty"`
	// 10.0 OK
	// 9.0 NG
	GteValue float64 `protobuf:"fixed64,5,opt,name=gte_value,json=gteValue,proto3" json:"gte_value,omitempty"`
	// 11.0 OK
	// 13.0 NG
	InValue float64 `protobuf:"fixed64,6,opt,name=in_value,json=inValue,proto3" json:"in_value,omitempty"`
	// 11.0 NG
	// 13.0 OK
	NotInValue float64 `protobuf:"fixed64,7,opt,name=not_in_value,json=notInValue,proto3" json:"not_in_value,omitempty"`
	// infinite or NaN NG double only
	FiniteValue float64 `protobuf:"fixed64,8,opt,name=finite_value,json=finiteValue,proto3" json:"finite_value,omitempty"`
}

func (x *DoubleValidationExample) Reset() {
	*x = DoubleValidationExample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_hello_v1_hello_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoubleValidationExample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleValidationExample) ProtoMessage() {}

func (x *DoubleValidationExample) ProtoReflect() protoreflect.Message {
	mi := &file_example_hello_v1_hello_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleValidationExample.ProtoReflect.Descriptor instead.
func (*DoubleValidationExample) Descriptor() ([]byte, []int) {
	return file_example_hello_v1_hello_proto_rawDescGZIP(), []int{6}
}

func (x *DoubleValidationExample) GetConstValue() float64 {
	if x != nil {
		return x.ConstValue
	}
	return 0
}

func (x *DoubleValidationExample) GetLtValue() float64 {
	if x != nil {
		return x.LtValue
	}
	return 0
}

func (x *DoubleValidationExample) GetLteValue() float64 {
	if x != nil {
		return x.LteValue
	}
	return 0
}

func (x *DoubleValidationExample) GetGtValue() float64 {
	if x != nil {
		return x.GtValue
	}
	return 0
}

func (x *DoubleValidationExample) GetGteValue() float64 {
	if x != nil {
		return x.GteValue
	}
	return 0
}

func (x *DoubleValidationExample) GetInValue() float64 {
	if x != nil {
		return x.InValue
	}
	return 0
}

func (x *DoubleValidationExample) GetNotInValue() float64 {
	if x != nil {
		return x.NotInValue
	}
	return 0
}

func (x *DoubleValidationExample) GetFiniteValue() float64 {
	if x != nil {
		return x.FiniteValue
	}
	return 0
}

type EnumValidationExample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MY_ENUM_VALUE1 OK
	// MY_ENUM_VALUE2 NG
	ConstValue EnumValidationExample_MyEnum `protobuf:"varint,1,opt,name=const_value,json=constValue,proto3,enum=example.hello.v1.EnumValidationExample_MyEnum" json:"const_value,omitempty"`
	// Undefined Value 4 NG
	DefinedOnlyValue EnumValidationExample_MyEnum `protobuf:"varint,2,opt,name=defined_only_value,json=definedOnlyValue,proto3,enum=example.hello.v1.EnumValidationExample_MyEnum" json:"defined_only_value,omitempty"`
	// MY_ENUM_VALUE1 OK
	// MY_ENUM_VALUE3 NG
	InValue EnumValidationExample_MyEnum `protobuf:"varint,3,opt,name=in_value,json=inValue,proto3,enum=example.hello.v1.EnumValidationExample_MyEnum" json:"in_value,omitempty"`
	// MY_ENUM_VALUE1 NG
	// MY_ENUM_VALUE3 OK
	NotInValue EnumValidationExample_MyEnum `protobuf:"varint,4,opt,name=not_in_value,json=notInValue,proto3,enum=example.hello.v1.EnumValidationExample_MyEnum" json:"not_in_value,omitempty"`
}

func (x *EnumValidationExample) Reset() {
	*x = EnumValidationExample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_hello_v1_hello_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumValidationExample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumValidationExample) ProtoMessage() {}

func (x *EnumValidationExample) ProtoReflect() protoreflect.Message {
	mi := &file_example_hello_v1_hello_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumValidationExample.ProtoReflect.Descriptor instead.
func (*EnumValidationExample) Descriptor() ([]byte, []int) {
	return file_example_hello_v1_hello_proto_rawDescGZIP(), []int{7}
}

func (x *EnumValidationExample) GetConstValue() EnumValidationExample_MyEnum {
	if x != nil {
		return x.ConstValue
	}
	return EnumValidationExample_MY_ENUM_UNSPECIFIED
}

func (x *EnumValidationExample) GetDefinedOnlyValue() EnumValidationExample_MyEnum {
	if x != nil {
		return x.DefinedOnlyValue
	}
	return EnumValidationExample_MY_ENUM_UNSPECIFIED
}

func (x *EnumValidationExample) GetInValue() EnumValidationExample_MyEnum {
	if x != nil {
		return x.InValue
	}
	return EnumValidationExample_MY_ENUM_UNSPECIFIED
}

func (x *EnumValidationExample) GetNotInValue() EnumValidationExample_MyEnum {
	if x != nil {
		return x.NotInValue
	}
	return EnumValidationExample_MY_ENUM_UNSPECIFIED
}

type MapValidationExample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// {"key1": "value1", "key2": "value2"} OK
	// {"key1": "value1"} NG
	MinPairsValue map[string]string `protobuf:"bytes,1,rep,name=min_pairs_value,json=minPairsValue,proto3" json:"min_pairs_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// {"key1": "value1", "key2": "value2"} OK
	// {"key1": "value1", "key2": "value2", "key3": "value3"} NG
	MaxPairsValue map[string]string `protobuf:"bytes,2,rep,name=max_pairs_value,json=maxPairsValue,proto3" json:"max_pairs_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// {"a": "value1"} NG
	// {"abcdefghijk": "value1"} NG
	// {"key1": "value1"} OK
	KeysValue map[string]string `protobuf:"bytes,3,rep,name=keys_value,json=keysValue,proto3" json:"keys_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// {"key1": "a"} NG
	// {"key1": "abcdefghijk"} NG
	// {"key1": "value1"} OK
	ValuesValue map[string]string `protobuf:"bytes,4,rep,name=values_value,json=valuesValue,proto3" json:"values_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapValidationExample) Reset() {
	*x = MapValidationExample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_hello_v1_hello_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapValidationExample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapValidationExample) ProtoMessage() {}

func (x *MapValidationExample) ProtoReflect() protoreflect.Message {
	mi := &file_example_hello_v1_hello_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapValidationExample.ProtoReflect.Descriptor instead.
func (*MapValidationExample) Descriptor() ([]byte, []int) {
	return file_example_hello_v1_hello_proto_rawDescGZIP(), []int{8}
}

func (x *MapValidationExample) GetMinPairsValue() map[string]string {
	if x != nil {
		return x.MinPairsValue
	}
	return nil
}

func (x *MapValidationExample) GetMaxPairsValue() map[string]string {
	if x != nil {
		return x.MaxPairsValue
	}
	return nil
}

func (x *MapValidationExample) GetKeysValue() map[string]string {
	if x != nil {
		return x.KeysValue
	}
	return nil
}

func (x *MapValidationExample) GetValuesValue() map[string]string {
	if x != nil {
		return x.ValuesValue
	}
	return nil
}

type RepeatedValidationExample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ["elm1", "elm2"] OK
	// ["elm1"] NG
	MinItemsValue []string `protobuf:"bytes,1,rep,name=min_items_value,json=minItemsValue,proto3" json:"min_items_value,omitempty"`
	// ["elm1", "elm2"] OK
	// ["elm1", "el2", "el3"] NG
	MaxItemsValue []string `protobuf:"bytes,2,rep,name=max_items_value,json=maxItemsValue,proto3" json:"max_items_value,omitempty"`
	// ["elm1", "elm2"] OK
	// ["elm1", "elm2", "elm2"] NG
	UniqueValue []string `protobuf:"bytes,3,rep,name=unique_value,json=uniqueValue,proto3" json:"unique_value,omitempty"`
	// ["a"] NG
	// ["abcdefghijk"] NG
	ItemsValue []string `protobuf:"bytes,4,rep,name=items_value,json=itemsValue,proto3" json:"items_value,omitempty"`
}

func (x *RepeatedValidationExample) Reset() {
	*x = RepeatedValidationExample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_hello_v1_hello_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedValidationExample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedValidationExample) ProtoMessage() {}

func (x *RepeatedValidationExample) ProtoReflect() protoreflect.Message {
	mi := &file_example_hello_v1_hello_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedValidationExample.ProtoReflect.Descriptor instead.
func (*RepeatedValidationExample) Descriptor() ([]byte, []int) {
	return file_example_hello_v1_hello_proto_rawDescGZIP(), []int{9}
}

func (x *RepeatedValidationExample) GetMinItemsValue() []string {
	if x != nil {
		return x.MinItemsValue
	}
	return nil
}

func (x *RepeatedValidationExample) GetMaxItemsValue() []string {
	if x != nil {
		return x.MaxItemsValue
	}
	return nil
}

func (x *RepeatedValidationExample) GetUniqueValue() []string {
	if x != nil {
		return x.UniqueValue
	}
	return nil
}

func (x *RepeatedValidationExample) GetItemsValue() []string {
	if x != nil {
		return x.ItemsValue
	}
	return nil
}

type AnyValidationExample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// google.protobuf.Int32Value OK
	// google.protobuf.BoolValue NG
	InValue *anypb.Any `protobuf:"bytes,1,opt,name=in_value,json=inValue,proto3" json:"in_value,omitempty"`
	// google.protobuf.Int32Value NG
	// google.protobuf.BoolValue OK
	NotInValue *anypb.Any `protobuf:"bytes,2,opt,name=not_in_value,json=notInValue,proto3" json:"not_in_value,omitempty"`
}

func (x *AnyValidationExample) Reset() {
	*x = AnyValidationExample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_hello_v1_hello_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnyValidationExample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnyValidationExample) ProtoMessage() {}

func (x *AnyValidationExample) ProtoReflect() protoreflect.Message {
	mi := &file_example_hello_v1_hello_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnyValidationExample.ProtoReflect.Descriptor instead.
func (*AnyValidationExample) Descriptor() ([]byte, []int) {
	return file_example_hello_v1_hello_proto_rawDescGZIP(), []int{10}
}

func (x *AnyValidationExample) GetInValue() *anypb.Any {
	if x != nil {
		return x.InValue
	}
	return nil
}

func (x *AnyValidationExample) GetNotInValue() *anypb.Any {
	if x != nil {
		return x.NotInValue
	}
	return nil
}

type DurationValidationExample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// <Go> durationpb.New(5 * time.Second) OK
	ConstValue *durationpb.Duration `protobuf:"bytes,1,opt,name=const_value,json=constValue,proto3" json:"const_value,omitempty"`
	// <Go> durationpb.New(4 * time.Second) OK
	LtValue *durationpb.Duration `protobuf:"bytes,2,opt,name=lt_value,json=ltValue,proto3" json:"lt_value,omitempty"`
	// <Go> durationpb.New(5 * time.Second) OK
	LteValue *durationpb.Duration `protobuf:"bytes,3,opt,name=lte_value,json=lteValue,proto3" json:"lte_value,omitempty"`
	// <Go> durationpb.New(6 * time.Second) OK
	GtValue *durationpb.Duration `protobuf:"bytes,4,opt,name=gt_value,json=gtValue,proto3" json:"gt_value,omitempty"`
	// <Go> durationpb.New(5 * time.Second) OK
	GteValue *durationpb.Duration `protobuf:"bytes,5,opt,name=gte_value,json=gteValue,proto3" json:"gte_value,omitempty"`
	// <Go> durationpb.New(5 * time.Second) OK
	InValue *durationpb.Duration `protobuf:"bytes,6,opt,name=in_value,json=inValue,proto3" json:"in_value,omitempty"`
	// <Go> durationpb.New(8 * time.Second) OK
	NotInValue *durationpb.Duration `protobuf:"bytes,7,opt,name=not_in_value,json=notInValue,proto3" json:"not_in_value,omitempty"`
}

func (x *DurationValidationExample) Reset() {
	*x = DurationValidationExample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_hello_v1_hello_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DurationValidationExample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DurationValidationExample) ProtoMessage() {}

func (x *DurationValidationExample) ProtoReflect() protoreflect.Message {
	mi := &file_example_hello_v1_hello_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DurationValidationExample.ProtoReflect.Descriptor instead.
func (*DurationValidationExample) Descriptor() ([]byte, []int) {
	return file_example_hello_v1_hello_proto_rawDescGZIP(), []int{11}
}

func (x *DurationValidationExample) GetConstValue() *durationpb.Duration {
	if x != nil {
		return x.ConstValue
	}
	return nil
}

func (x *DurationValidationExample) GetLtValue() *durationpb.Duration {
	if x != nil {
		return x.LtValue
	}
	return nil
}

func (x *DurationValidationExample) GetLteValue() *durationpb.Duration {
	if x != nil {
		return x.LteValue
	}
	return nil
}

func (x *DurationValidationExample) GetGtValue() *durationpb.Duration {
	if x != nil {
		return x.GtValue
	}
	return nil
}

func (x *DurationValidationExample) GetGteValue() *durationpb.Duration {
	if x != nil {
		return x.GteValue
	}
	return nil
}

func (x *DurationValidationExample) GetInValue() *durationpb.Duration {
	if x != nil {
		return x.InValue
	}
	return nil
}

func (x *DurationValidationExample) GetNotInValue() *durationpb.Duration {
	if x != nil {
		return x.NotInValue
	}
	return nil
}

type TimestampValidationExample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 　date -u -j -f "%Y-%m-%d %H:%M:%S" "2024-06-03 12:00:00" +%s
	ConstValue *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=const_value,json=constValue,proto3" json:"const_value,omitempty"`
	// date -j -f "%Y-%m-%d %H:%M:%S" "2024-06-03 11:00:00" +%s
	// > 1717412400 OK
	LtValue *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=lt_value,json=ltValue,proto3" json:"lt_value,omitempty"`
	// date -j -f "%Y-%m-%d %H:%M:%S" "2024-06-03 12:00:00" +%s
	// > 1717416000 OK
	LteValue   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=lte_value,json=lteValue,proto3" json:"lte_value,omitempty"`
	LtNowValue *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=lt_now_value,json=ltNowValue,proto3" json:"lt_now_value,omitempty"`
	// date -j -f "%Y-%m-%d %H:%M:%S" "2024-06-03 13:00:00" +%s
	// > 1717419600 OK
	GtValue *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=gt_value,json=gtValue,proto3" json:"gt_value,omitempty"`
	// date -j -f "%Y-%m-%d %H:%M:%S" "2024-06-03 12:00:00" +%s
	// > 1717416000 OK
	GteValue   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=gte_value,json=gteValue,proto3" json:"gte_value,omitempty"`
	GtNowValue *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=gt_now_value,json=gtNowValue,proto3" json:"gt_now_value,omitempty"`
	// バリデーション時の現在時刻から前後1時間以内の時刻であること
	WithinValue *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=within_value,json=withinValue,proto3" json:"within_value,omitempty"`
}

func (x *TimestampValidationExample) Reset() {
	*x = TimestampValidationExample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_hello_v1_hello_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimestampValidationExample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampValidationExample) ProtoMessage() {}

func (x *TimestampValidationExample) ProtoReflect() protoreflect.Message {
	mi := &file_example_hello_v1_hello_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampValidationExample.ProtoReflect.Descriptor instead.
func (*TimestampValidationExample) Descriptor() ([]byte, []int) {
	return file_example_hello_v1_hello_proto_rawDescGZIP(), []int{12}
}

func (x *TimestampValidationExample) GetConstValue() *timestamppb.Timestamp {
	if x != nil {
		return x.ConstValue
	}
	return nil
}

func (x *TimestampValidationExample) GetLtValue() *timestamppb.Timestamp {
	if x != nil {
		return x.LtValue
	}
	return nil
}

func (x *TimestampValidationExample) GetLteValue() *timestamppb.Timestamp {
	if x != nil {
		return x.LteValue
	}
	return nil
}

func (x *TimestampValidationExample) GetLtNowValue() *timestamppb.Timestamp {
	if x != nil {
		return x.LtNowValue
	}
	return nil
}

func (x *TimestampValidationExample) GetGtValue() *timestamppb.Timestamp {
	if x != nil {
		return x.GtValue
	}
	return nil
}

func (x *TimestampValidationExample) GetGteValue() *timestamppb.Timestamp {
	if x != nil {
		return x.GteValue
	}
	return nil
}

func (x *TimestampValidationExample) GetGtNowValue() *timestamppb.Timestamp {
	if x != nil {
		return x.GtNowValue
	}
	return nil
}

func (x *TimestampValidationExample) GetWithinValue() *timestamppb.Timestamp {
	if x != nil {
		return x.WithinValue
	}
	return nil
}

type FieldConstraintsExample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 2 OK
	// 3 NG
	EvenValue int32 `protobuf:"varint,1,opt,name=even_value,json=evenValue,proto3" json:"even_value,omitempty"`
	// 値の指定がないとerror
	RequiredMessageValue *FieldConstraintsExample_MyValue `protobuf:"bytes,2,opt,name=required_message_value,json=requiredMessageValue,proto3" json:"required_message_value,omitempty"`
	// デフォルト値(空文字)だとエラー
	RequiredStringValue string `protobuf:"bytes,3,opt,name=required_string_value,json=requiredStringValue,proto3" json:"required_string_value,omitempty"`
	// デフォルト値(0)だとエラー
	RequiredInt32Value int32 `protobuf:"varint,4,opt,name=required_int32_value,json=requiredInt32Value,proto3" json:"required_int32_value,omitempty"`
	// 0がだめなのでenumの場合、未定義がエラーになる
	RequiredEnumValue FieldConstraintsExample_Status `protobuf:"varint,5,opt,name=required_enum_value,json=requiredEnumValue,proto3,enum=example.hello.v1.FieldConstraintsExample_Status" json:"required_enum_value,omitempty"`
	// 要素が0のときエラー
	RequiredRepeatedValue []string `protobuf:"bytes,6,rep,name=required_repeated_value,json=requiredRepeatedValue,proto3" json:"required_repeated_value,omitempty"`
	// 要素が0のときエラー
	RequiredMapValue map[string]string `protobuf:"bytes,7,rep,name=required_map_value,json=requiredMapValue,proto3" json:"required_map_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 値が指定されていない時にはemail制約を無視する
	IgnoreValue string `protobuf:"bytes,8,opt,name=ignore_value,json=ignoreValue,proto3" json:"ignore_value,omitempty"`
}

func (x *FieldConstraintsExample) Reset() {
	*x = FieldConstraintsExample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_hello_v1_hello_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldConstraintsExample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldConstraintsExample) ProtoMessage() {}

func (x *FieldConstraintsExample) ProtoReflect() protoreflect.Message {
	mi := &file_example_hello_v1_hello_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldConstraintsExample.ProtoReflect.Descriptor instead.
func (*FieldConstraintsExample) Descriptor() ([]byte, []int) {
	return file_example_hello_v1_hello_proto_rawDescGZIP(), []int{13}
}

func (x *FieldConstraintsExample) GetEvenValue() int32 {
	if x != nil {
		return x.EvenValue
	}
	return 0
}

func (x *FieldConstraintsExample) GetRequiredMessageValue() *FieldConstraintsExample_MyValue {
	if x != nil {
		return x.RequiredMessageValue
	}
	return nil
}

func (x *FieldConstraintsExample) GetRequiredStringValue() string {
	if x != nil {
		return x.RequiredStringValue
	}
	return ""
}

func (x *FieldConstraintsExample) GetRequiredInt32Value() int32 {
	if x != nil {
		return x.RequiredInt32Value
	}
	return 0
}

func (x *FieldConstraintsExample) GetRequiredEnumValue() FieldConstraintsExample_Status {
	if x != nil {
		return x.RequiredEnumValue
	}
	return FieldConstraintsExample_STATUS_UNSPECIFIED
}

func (x *FieldConstraintsExample) GetRequiredRepeatedValue() []string {
	if x != nil {
		return x.RequiredRepeatedValue
	}
	return nil
}

func (x *FieldConstraintsExample) GetRequiredMapValue() map[string]string {
	if x != nil {
		return x.RequiredMapValue
	}
	return nil
}

func (x *FieldConstraintsExample) GetIgnoreValue() string {
	if x != nil {
		return x.IgnoreValue
	}
	return ""
}

type FieldConstraintsExample_MyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FieldConstraintsExample_MyValue) Reset() {
	*x = FieldConstraintsExample_MyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_hello_v1_hello_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldConstraintsExample_MyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldConstraintsExample_MyValue) ProtoMessage() {}

func (x *FieldConstraintsExample_MyValue) ProtoReflect() protoreflect.Message {
	mi := &file_example_hello_v1_hello_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldConstraintsExample_MyValue.ProtoReflect.Descriptor instead.
func (*FieldConstraintsExample_MyValue) Descriptor() ([]byte, []int) {
	return file_example_hello_v1_hello_proto_rawDescGZIP(), []int{13, 0}
}

func (x *FieldConstraintsExample_MyValue) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

var File_example_hello_v1_hello_proto protoreflect.FileDescriptor

var file_example_hello_v1_hello_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2f,
	0x76, 0x31, 0x2f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2e, 0x76, 0x31,
	0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61,
	0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x26, 0x0a, 0x05, 0x48, 0x65, 0x6c,
	0x6c, 0x6f, 0x12, 0x1d, 0x0a, 0x05, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x68, 0x65, 0x6c, 0x6c,
	0x6f, 0x22, 0x33, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x45, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x3a,
	0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x22, 0x4a, 0x0a, 0x0c, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x45,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x76, 0x61, 0x6c, 0x31, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x76, 0x61, 0x6c, 0x31, 0x12, 0x14, 0x0a, 0x04,
	0x76, 0x61, 0x6c, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x76, 0x61,
	0x6c, 0x32, 0x42, 0x0e, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x05, 0xba, 0x48, 0x02,
	0x08, 0x01, 0x22, 0xe0, 0x0c, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x2d,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0x48, 0x09, 0x72, 0x07, 0x0a, 0x05, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a,
	0x09, 0x6c, 0x65, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x98, 0x01, 0x05, 0x52, 0x08, 0x6c, 0x65, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04,
	0x72, 0x02, 0x10, 0x05, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2b, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x18,
	0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30,
	0x0a, 0x0f, 0x6c, 0x65, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xa0, 0x01,
	0x02, 0x52, 0x0d, 0x6c, 0x65, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2f, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02,
	0x20, 0x02, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2f, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72,
	0x02, 0x28, 0x02, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xba, 0x48, 0x0f, 0x72, 0x0d,
	0x32, 0x0b, 0x5e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x2e, 0x2a, 0x24, 0x52, 0x0c, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x0c, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xba, 0x48, 0x09, 0x72, 0x07, 0x3a, 0x05, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52,
	0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x0c,
	0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xba, 0x48, 0x09, 0x72, 0x07, 0x42, 0x05, 0x57, 0x6f, 0x72, 0x6c, 0x64,
	0x52, 0x0b, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xba, 0x48, 0x0a, 0x72, 0x08, 0x4a, 0x06, 0x62, 0x61,
	0x6e, 0x61, 0x6e, 0x61, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0e, 0xba, 0x48, 0x0b, 0x72, 0x09, 0xba, 0x01, 0x06, 0x62, 0x61, 0x6e, 0x61, 0x6e, 0x61, 0x52,
	0x10, 0x6e, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x17, 0xba, 0x48, 0x14, 0x72, 0x12, 0x52, 0x04, 0x4a, 0x61, 0x76, 0x61,
	0x52, 0x06, 0x4b, 0x6f, 0x74, 0x6c, 0x69, 0x6e, 0x52, 0x02, 0x47, 0x6f, 0x52, 0x07, 0x69, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba, 0x48, 0x14,
	0x72, 0x12, 0x5a, 0x04, 0x4a, 0x61, 0x76, 0x61, 0x5a, 0x06, 0x4b, 0x6f, 0x74, 0x6c, 0x69, 0x6e,
	0x5a, 0x02, 0x47, 0x6f, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x28, 0x0a, 0x0b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x60, 0x01, 0x52, 0x0a,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x0e, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x68, 0x01, 0x52, 0x0d, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x08, 0x69, 0x70,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48,
	0x04, 0x72, 0x02, 0x70, 0x01, 0x52, 0x07, 0x69, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26,
	0x0a, 0x0a, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x78, 0x01, 0x52, 0x09, 0x69, 0x70, 0x76,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0a, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72,
	0x03, 0x80, 0x01, 0x01, 0x52, 0x09, 0x69, 0x70, 0x76, 0x36, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x25, 0x0a, 0x09, 0x75, 0x72, 0x69, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x88, 0x01, 0x01, 0x52, 0x08, 0x75, 0x72,
	0x69, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x0d, 0x75, 0x72, 0x69, 0x5f, 0x72, 0x65,
	0x66, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x72, 0x03, 0x90, 0x01, 0x01, 0x52, 0x0b, 0x75, 0x72, 0x69, 0x52, 0x65, 0x66, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2d, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05,
	0x72, 0x03, 0xa8, 0x01, 0x01, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0a, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0x52, 0x09, 0x75, 0x75, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x0b,
	0x74, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x88, 0x02, 0x01, 0x52, 0x0a, 0x74, 0x75, 0x75,
	0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3f, 0x0a, 0x17, 0x69, 0x70, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x69, 0x66, 0x78, 0x6c, 0x65, 0x6e, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xd0,
	0x01, 0x01, 0x52, 0x14, 0x69, 0x70, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x65, 0x69, 0x66, 0x78,
	0x6c, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x19, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x69, 0x66, 0x78, 0x6c, 0x65, 0x6e, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05,
	0x72, 0x03, 0xd8, 0x01, 0x01, 0x52, 0x16, 0x69, 0x70, 0x76, 0x34, 0x57, 0x69, 0x74, 0x68, 0x50,
	0x72, 0x65, 0x69, 0x66, 0x78, 0x6c, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x43, 0x0a,
	0x19, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x69, 0x66,
	0x78, 0x6c, 0x65, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xe0, 0x01, 0x01, 0x52, 0x16, 0x69, 0x70, 0x76, 0x36,
	0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x65, 0x69, 0x66, 0x78, 0x6c, 0x65, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x30, 0x0a, 0x0f, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05,
	0x72, 0x03, 0xe8, 0x01, 0x01, 0x52, 0x0d, 0x69, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x10, 0x69, 0x70, 0x34, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xba, 0x48, 0x05, 0x72, 0x03, 0xf0, 0x01, 0x01, 0x52, 0x0e, 0x69, 0x70, 0x34, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x10, 0x69, 0x70, 0x36, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xf8, 0x01, 0x01, 0x52, 0x0e, 0x69, 0x70,
	0x36, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x13,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03,
	0x80, 0x02, 0x01, 0x52, 0x10, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x64, 0x50, 0x6f, 0x72, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x15, 0x77, 0x65, 0x6c, 0x6c, 0x5f, 0x6b, 0x6f,
	0x77, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0x72, 0x06, 0xc8, 0x01, 0x01, 0xc0, 0x01,
	0x01, 0x52, 0x12, 0x77, 0x65, 0x6c, 0x6c, 0x4b, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x67, 0x65, 0x78,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x69, 0x0a, 0x15, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x26,
	0x0a, 0x0a, 0x74, 0x72, 0x75, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x07, 0xba, 0x48, 0x04, 0x6a, 0x02, 0x08, 0x01, 0x52, 0x09, 0x74, 0x72, 0x75,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x0b, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x07, 0xba, 0x48, 0x04,
	0x6a, 0x02, 0x08, 0x00, 0x52, 0x0a, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xe6, 0x04, 0x0a, 0x16, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0x0b, 0xba, 0x48, 0x08, 0x7a, 0x06, 0x0a, 0x04, 0x01, 0x02, 0x03, 0x04, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x6c, 0x65, 0x6e,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x07, 0xba, 0x48,
	0x04, 0x7a, 0x02, 0x68, 0x04, 0x52, 0x08, 0x6c, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2b, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x07, 0xba, 0x48, 0x04, 0x7a, 0x02, 0x10, 0x02, 0x52,
	0x0b, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x0d,
	0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x07, 0xba, 0x48, 0x04, 0x7a, 0x02, 0x18, 0x02, 0x52, 0x0b, 0x6d, 0x61,
	0x78, 0x4c, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x70, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0x15, 0xba, 0x48, 0x12, 0x7a, 0x10, 0x22, 0x0e, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x24, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x09, 0xba, 0x48, 0x06,
	0x7a, 0x04, 0x2a, 0x02, 0x01, 0x02, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x0c, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x09, 0xba, 0x48, 0x06, 0x7a, 0x04,
	0x32, 0x02, 0x02, 0x03, 0x52, 0x0b, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2f, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x08, 0xba, 0x48, 0x05, 0x7a, 0x03,
	0x3a, 0x01, 0x02, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x11, 0xba, 0x48, 0x0e, 0x7a, 0x0c, 0x42, 0x02, 0x01, 0x02, 0x42,
	0x02, 0x02, 0x03, 0x42, 0x02, 0x03, 0x04, 0x52, 0x07, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x33, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x11, 0xba, 0x48, 0x0e, 0x7a, 0x0c, 0x4a, 0x02, 0x01,
	0x02, 0x4a, 0x02, 0x02, 0x03, 0x4a, 0x02, 0x03, 0x04, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x49, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x08, 0x69, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x07, 0xba, 0x48, 0x04, 0x7a, 0x02, 0x50, 0x01,
	0x52, 0x07, 0x69, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x0a, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x07, 0xba,
	0x48, 0x04, 0x7a, 0x02, 0x58, 0x01, 0x52, 0x09, 0x69, 0x70, 0x76, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x26, 0x0a, 0x0a, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x07, 0xba, 0x48, 0x04, 0x7a, 0x02, 0x60, 0x01, 0x52, 0x09,
	0x69, 0x70, 0x76, 0x36, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa7, 0x03, 0x0a, 0x17, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0x12,
	0x09, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x40, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0x12, 0x09, 0x11,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x52, 0x07, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2b, 0x0a, 0x09, 0x6c, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0x12, 0x09, 0x19, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x24, 0x40, 0x52, 0x08, 0x6c, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29,
	0x0a, 0x08, 0x67, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x42, 0x0e, 0xba, 0x48, 0x0b, 0x12, 0x09, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40,
	0x52, 0x07, 0x67, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x67, 0x74, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0xba, 0x48,
	0x0b, 0x12, 0x09, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x52, 0x08, 0x67, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x42, 0x20, 0xba, 0x48, 0x1d, 0x12, 0x1b, 0x31,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26,
	0x40, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x40, 0x52, 0x07, 0x69, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x42, 0x20, 0xba, 0x48, 0x1d, 0x12, 0x1b,
	0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x26, 0x40, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x40, 0x52, 0x0a, 0x6e, 0x6f, 0x74,
	0x49, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x42, 0x07, 0xba,
	0x48, 0x04, 0x12, 0x02, 0x40, 0x01, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xee, 0x03, 0x0a, 0x15, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x59, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x68, 0x65, 0x6c,
	0x6c, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x79, 0x45, 0x6e,
	0x75, 0x6d, 0x42, 0x08, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x66, 0x0a, 0x12, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x68,
	0x65, 0x6c, 0x6c, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x79,
	0x45, 0x6e, 0x75, 0x6d, 0x42, 0x08, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x10,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x55, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x68, 0x65, 0x6c,
	0x6c, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x79, 0x45, 0x6e,
	0x75, 0x6d, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x82, 0x01, 0x04, 0x18, 0x01, 0x18, 0x02, 0x52, 0x07,
	0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5c, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x5f, 0x69,
	0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x0a, 0xba,
	0x48, 0x07, 0x82, 0x01, 0x04, 0x20, 0x01, 0x20, 0x02, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x49, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5d, 0x0a, 0x06, 0x4d, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x17, 0x0a, 0x13, 0x4d, 0x59, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x59, 0x5f, 0x45,
	0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x31, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x4d, 0x59, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x32, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x59, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x33, 0x10, 0x03, 0x22, 0xc4, 0x05, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x6b, 0x0a,
	0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d,
	0x69, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x08, 0xba, 0x48, 0x05, 0x9a, 0x01, 0x02, 0x08, 0x02, 0x52, 0x0d, 0x6d, 0x69, 0x6e,
	0x50, 0x61, 0x69, 0x72, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x6b, 0x0a, 0x0f, 0x6d, 0x61,
	0x78, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x61, 0x78, 0x50,
	0x61, 0x69, 0x72, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x08,
	0xba, 0x48, 0x05, 0x9a, 0x01, 0x02, 0x10, 0x02, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x69,
	0x72, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x64, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x73, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x70, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0x9a, 0x01, 0x08, 0x22, 0x06, 0x72, 0x04, 0x10, 0x03,
	0x18, 0x0a, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x6a, 0x0a,
	0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0e, 0xba, 0x48,
	0x0b, 0x9a, 0x01, 0x08, 0x2a, 0x06, 0x72, 0x04, 0x10, 0x03, 0x18, 0x0a, 0x52, 0x0b, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x69, 0x6e,
	0x50, 0x61, 0x69, 0x72, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d,
	0x61, 0x78, 0x50, 0x61, 0x69, 0x72, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a,
	0x0e, 0x4b, 0x65, 0x79, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdd, 0x01, 0x0a, 0x19,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x0f, 0x6d, 0x69, 0x6e,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x02, 0x52, 0x0d, 0x6d, 0x69,
	0x6e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x0f, 0x6d,
	0x61, 0x78, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x10, 0x02, 0x52, 0x0d,
	0x6d, 0x61, 0x78, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a,
	0x0c, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x0b, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x0e, 0xba, 0x48, 0x0b, 0x92, 0x01, 0x08, 0x22, 0x06, 0x72, 0x04, 0x10, 0x03, 0x18, 0x0a, 0x52,
	0x0a, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd3, 0x02, 0x0a, 0x14,
	0x41, 0x6e, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x67, 0xba,
	0x48, 0x64, 0xa2, 0x01, 0x61, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x9f, 0x01, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x67, 0xba, 0x48,
	0x64, 0xa2, 0x01, 0x61, 0x1a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x8a, 0x04, 0x0a, 0x19, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12,
	0x46, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0a, 0xba, 0x48, 0x07, 0xaa, 0x01, 0x04, 0x12, 0x02, 0x08, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0xba, 0x48, 0x07, 0xaa, 0x01, 0x04, 0x1a, 0x02, 0x08, 0x05,
	0x52, 0x07, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x6c, 0x74, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0xba, 0x48, 0x07, 0xaa, 0x01, 0x04, 0x22,
	0x02, 0x08, 0x05, 0x52, 0x08, 0x6c, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x0a,
	0x08, 0x67, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0xba, 0x48, 0x07, 0xaa,
	0x01, 0x04, 0x2a, 0x02, 0x08, 0x05, 0x52, 0x07, 0x67, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x42, 0x0a, 0x09, 0x67, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0xba,
	0x48, 0x07, 0xaa, 0x01, 0x04, 0x32, 0x02, 0x08, 0x05, 0x52, 0x08, 0x67, 0x74, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x48, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x12, 0xba, 0x48, 0x0f, 0xaa, 0x01, 0x0c, 0x3a, 0x02, 0x08, 0x05, 0x3a, 0x02, 0x08, 0x06,
	0x3a, 0x02, 0x08, 0x07, 0x52, 0x07, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4f, 0x0a,
	0x0c, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12,
	0xba, 0x48, 0x0f, 0xaa, 0x01, 0x0c, 0x42, 0x02, 0x08, 0x05, 0x42, 0x02, 0x08, 0x06, 0x42, 0x02,
	0x08, 0x07, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe5,
	0x04, 0x0a, 0x1a, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x4b, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0e,
	0xba, 0x48, 0x0b, 0xb2, 0x01, 0x08, 0x12, 0x06, 0x08, 0xc0, 0xe0, 0xf6, 0xb2, 0x06, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x6c, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0xb2, 0x01, 0x08,
	0x1a, 0x06, 0x08, 0xc0, 0xe0, 0xf6, 0xb2, 0x06, 0x52, 0x07, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x47, 0x0a, 0x09, 0x6c, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x0e, 0xba, 0x48, 0x0b, 0xb2, 0x01, 0x08, 0x22, 0x06, 0x08, 0xc0, 0xe0, 0xf6, 0xb2, 0x06,
	0x52, 0x08, 0x6c, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x6c, 0x74,
	0x5f, 0x6e, 0x6f, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xba, 0x48,
	0x05, 0xb2, 0x01, 0x02, 0x38, 0x01, 0x52, 0x0a, 0x6c, 0x74, 0x4e, 0x6f, 0x77, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x67, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x0e, 0xba, 0x48, 0x0b, 0xb2, 0x01, 0x08, 0x2a, 0x06, 0x08, 0xc0, 0xe0, 0xf6, 0xb2, 0x06,
	0x52, 0x07, 0x67, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x67, 0x74, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0xb2, 0x01, 0x08,
	0x32, 0x06, 0x08, 0xc0, 0xe0, 0xf6, 0xb2, 0x06, 0x52, 0x08, 0x67, 0x74, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x67, 0x74, 0x5f, 0x6e, 0x6f, 0x77, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xba, 0x48, 0x05, 0xb2, 0x01, 0x02, 0x40, 0x01, 0x52, 0x0a,
	0x67, 0x74, 0x4e, 0x6f, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x77, 0x69,
	0x74, 0x68, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0xba, 0x48,
	0x08, 0xb2, 0x01, 0x05, 0x4a, 0x03, 0x08, 0x90, 0x1c, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x69,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc4, 0x06, 0x0a, 0x17, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x12, 0x5b, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3c, 0xba, 0x48, 0x39, 0xba, 0x01, 0x36, 0x0a, 0x0a,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x12, 0x19, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x20, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x0d, 0x74, 0x68, 0x69, 0x73, 0x20, 0x25, 0x20, 0x32, 0x20,
	0x3d, 0x3d, 0x20, 0x30, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x6f, 0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x14, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x3a, 0x0a, 0x15, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x14,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x68, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x11, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x3e, 0x0a, 0x17, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x75, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x70,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73,
	0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4d,
	0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2d, 0x0a, 0x0c, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba,
	0x48, 0x07, 0xd8, 0x01, 0x01, 0x72, 0x02, 0x60, 0x01, 0x52, 0x0b, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1f, 0x0a, 0x07, 0x4d, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x43, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2f, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x42, 0xb5, 0x01,
	0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2d, 0x64, 0x65, 0x6d, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x45, 0x48, 0x58, 0xaa, 0x02, 0x10, 0x45, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x2e, 0x56, 0x31, 0xca, 0x02,
	0x10, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5c, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x5c, 0x56,
	0x31, 0xe2, 0x02, 0x1c, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5c, 0x48, 0x65, 0x6c, 0x6c,
	0x6f, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x12, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x3a, 0x48, 0x65, 0x6c, 0x6c,
	0x6f, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_example_hello_v1_hello_proto_rawDescOnce sync.Once
	file_example_hello_v1_hello_proto_rawDescData = file_example_hello_v1_hello_proto_rawDesc
)

func file_example_hello_v1_hello_proto_rawDescGZIP() []byte {
	file_example_hello_v1_hello_proto_rawDescOnce.Do(func() {
		file_example_hello_v1_hello_proto_rawDescData = protoimpl.X.CompressGZIP(file_example_hello_v1_hello_proto_rawDescData)
	})
	return file_example_hello_v1_hello_proto_rawDescData
}

var file_example_hello_v1_hello_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_example_hello_v1_hello_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_example_hello_v1_hello_proto_goTypes = []interface{}{
	(EnumValidationExample_MyEnum)(0),       // 0: example.hello.v1.EnumValidationExample.MyEnum
	(FieldConstraintsExample_Status)(0),     // 1: example.hello.v1.FieldConstraintsExample.Status
	(*Hello)(nil),                           // 2: example.hello.v1.Hello
	(*DisabledExample)(nil),                 // 3: example.hello.v1.DisabledExample
	(*OneofExample)(nil),                    // 4: example.hello.v1.OneofExample
	(*StringValidationExample)(nil),         // 5: example.hello.v1.StringValidationExample
	(*BoolValidationExample)(nil),           // 6: example.hello.v1.BoolValidationExample
	(*BytesValidationExample)(nil),          // 7: example.hello.v1.BytesValidationExample
	(*DoubleValidationExample)(nil),         // 8: example.hello.v1.DoubleValidationExample
	(*EnumValidationExample)(nil),           // 9: example.hello.v1.EnumValidationExample
	(*MapValidationExample)(nil),            // 10: example.hello.v1.MapValidationExample
	(*RepeatedValidationExample)(nil),       // 11: example.hello.v1.RepeatedValidationExample
	(*AnyValidationExample)(nil),            // 12: example.hello.v1.AnyValidationExample
	(*DurationValidationExample)(nil),       // 13: example.hello.v1.DurationValidationExample
	(*TimestampValidationExample)(nil),      // 14: example.hello.v1.TimestampValidationExample
	(*FieldConstraintsExample)(nil),         // 15: example.hello.v1.FieldConstraintsExample
	nil,                                     // 16: example.hello.v1.MapValidationExample.MinPairsValueEntry
	nil,                                     // 17: example.hello.v1.MapValidationExample.MaxPairsValueEntry
	nil,                                     // 18: example.hello.v1.MapValidationExample.KeysValueEntry
	nil,                                     // 19: example.hello.v1.MapValidationExample.ValuesValueEntry
	(*FieldConstraintsExample_MyValue)(nil), // 20: example.hello.v1.FieldConstraintsExample.MyValue
	nil,                                     // 21: example.hello.v1.FieldConstraintsExample.RequiredMapValueEntry
	(*anypb.Any)(nil),                       // 22: google.protobuf.Any
	(*durationpb.Duration)(nil),             // 23: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),           // 24: google.protobuf.Timestamp
}
var file_example_hello_v1_hello_proto_depIdxs = []int32{
	0,  // 0: example.hello.v1.EnumValidationExample.const_value:type_name -> example.hello.v1.EnumValidationExample.MyEnum
	0,  // 1: example.hello.v1.EnumValidationExample.defined_only_value:type_name -> example.hello.v1.EnumValidationExample.MyEnum
	0,  // 2: example.hello.v1.EnumValidationExample.in_value:type_name -> example.hello.v1.EnumValidationExample.MyEnum
	0,  // 3: example.hello.v1.EnumValidationExample.not_in_value:type_name -> example.hello.v1.EnumValidationExample.MyEnum
	16, // 4: example.hello.v1.MapValidationExample.min_pairs_value:type_name -> example.hello.v1.MapValidationExample.MinPairsValueEntry
	17, // 5: example.hello.v1.MapValidationExample.max_pairs_value:type_name -> example.hello.v1.MapValidationExample.MaxPairsValueEntry
	18, // 6: example.hello.v1.MapValidationExample.keys_value:type_name -> example.hello.v1.MapValidationExample.KeysValueEntry
	19, // 7: example.hello.v1.MapValidationExample.values_value:type_name -> example.hello.v1.MapValidationExample.ValuesValueEntry
	22, // 8: example.hello.v1.AnyValidationExample.in_value:type_name -> google.protobuf.Any
	22, // 9: example.hello.v1.AnyValidationExample.not_in_value:type_name -> google.protobuf.Any
	23, // 10: example.hello.v1.DurationValidationExample.const_value:type_name -> google.protobuf.Duration
	23, // 11: example.hello.v1.DurationValidationExample.lt_value:type_name -> google.protobuf.Duration
	23, // 12: example.hello.v1.DurationValidationExample.lte_value:type_name -> google.protobuf.Duration
	23, // 13: example.hello.v1.DurationValidationExample.gt_value:type_name -> google.protobuf.Duration
	23, // 14: example.hello.v1.DurationValidationExample.gte_value:type_name -> google.protobuf.Duration
	23, // 15: example.hello.v1.DurationValidationExample.in_value:type_name -> google.protobuf.Duration
	23, // 16: example.hello.v1.DurationValidationExample.not_in_value:type_name -> google.protobuf.Duration
	24, // 17: example.hello.v1.TimestampValidationExample.const_value:type_name -> google.protobuf.Timestamp
	24, // 18: example.hello.v1.TimestampValidationExample.lt_value:type_name -> google.protobuf.Timestamp
	24, // 19: example.hello.v1.TimestampValidationExample.lte_value:type_name -> google.protobuf.Timestamp
	24, // 20: example.hello.v1.TimestampValidationExample.lt_now_value:type_name -> google.protobuf.Timestamp
	24, // 21: example.hello.v1.TimestampValidationExample.gt_value:type_name -> google.protobuf.Timestamp
	24, // 22: example.hello.v1.TimestampValidationExample.gte_value:type_name -> google.protobuf.Timestamp
	24, // 23: example.hello.v1.TimestampValidationExample.gt_now_value:type_name -> google.protobuf.Timestamp
	24, // 24: example.hello.v1.TimestampValidationExample.within_value:type_name -> google.protobuf.Timestamp
	20, // 25: example.hello.v1.FieldConstraintsExample.required_message_value:type_name -> example.hello.v1.FieldConstraintsExample.MyValue
	1,  // 26: example.hello.v1.FieldConstraintsExample.required_enum_value:type_name -> example.hello.v1.FieldConstraintsExample.Status
	21, // 27: example.hello.v1.FieldConstraintsExample.required_map_value:type_name -> example.hello.v1.FieldConstraintsExample.RequiredMapValueEntry
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_example_hello_v1_hello_proto_init() }
func file_example_hello_v1_hello_proto_init() {
	if File_example_hello_v1_hello_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_example_hello_v1_hello_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hello); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_hello_v1_hello_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisabledExample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_hello_v1_hello_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneofExample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_hello_v1_hello_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringValidationExample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_hello_v1_hello_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolValidationExample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_hello_v1_hello_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BytesValidationExample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_hello_v1_hello_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoubleValidationExample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_hello_v1_hello_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumValidationExample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_hello_v1_hello_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapValidationExample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_hello_v1_hello_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedValidationExample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_hello_v1_hello_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnyValidationExample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_hello_v1_hello_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DurationValidationExample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_hello_v1_hello_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimestampValidationExample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_hello_v1_hello_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldConstraintsExample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_hello_v1_hello_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldConstraintsExample_MyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_example_hello_v1_hello_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*OneofExample_Val1)(nil),
		(*OneofExample_Val2)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_example_hello_v1_hello_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_example_hello_v1_hello_proto_goTypes,
		DependencyIndexes: file_example_hello_v1_hello_proto_depIdxs,
		EnumInfos:         file_example_hello_v1_hello_proto_enumTypes,
		MessageInfos:      file_example_hello_v1_hello_proto_msgTypes,
	}.Build()
	File_example_hello_v1_hello_proto = out.File
	file_example_hello_v1_hello_proto_rawDesc = nil
	file_example_hello_v1_hello_proto_goTypes = nil
	file_example_hello_v1_hello_proto_depIdxs = nil
}
