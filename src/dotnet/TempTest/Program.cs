// See https://aka.ms/new-console-template for more information
using Google.Protobuf.Reflection;
using ProtoModels;
using System.Collections.Generic;
using Google.Protobuf;
using Google.Protobuf.WellKnownTypes;

// public class MyFieldEvaluator : ProtoValidate.IFieldEvaluator
// {
//     public bool CanEvaluate(Google.Protobuf.Reflection.FieldDescriptor field) 
//     {
//         // Replace this with your own logic to determine if this evaluator can evaluate the field
//         return field.FieldType == Google.Protobuf.Reflection.FieldType.String;
//     }

//     public void Evaluate(Google.Protobuf.Reflection.FieldDescriptor field, Google.Protobuf.IMessage message, ProtoValidate.ValidatorContext context)
//     {
//         // Add your validation logic here
//     }
// }


// var user = new User();
// var p = new Person();
// var event = new Event();
// Console.WriteLine(event.ToString());
Console.WriteLine("Hello, World!");

// var e = new ExEvent();

var student = new Student{ Age = 19 };
student.Age = 24;


var messageDescriptor = Student.Descriptor;
var f = messageDescriptor.File;
var fieldDescriptor = messageDescriptor.FindFieldByName("age");
// var keyDescriptor = fieldDescriptor.MessageType.FindFieldByNumber(1);
// var valDescriptor = fieldDescriptor.MessageType.FindFieldByNumber(2);

var bytes = File.ReadAllBytes("Protoset/user.protoset");
var fileDescriptorSet = FileDescriptorSet.Parser.ParseFrom(bytes);
var x = fileDescriptorSet.File.ToList().First();

// var bytes = File.ReadAllBytes("Proto/user.protoset");
// var fileDescriptorSet = FileDescriptorSet.Parser.ParseFrom(bytes);

// Get the first FileDescriptorProto from the set
FileDescriptorProto fileDescriptorProto = fileDescriptorSet.File[0];
// var f = fileDescriptorSet.File;
// var x = fileDescriptorProto.Descriptor;
// Convert the FileDescriptorProto to a FileDescriptor
// var fileDescriptor = FileDescriptor.BuildFrom(fileDescriptorProto, new FileDescriptor[0]);
ByteString byteString = ByteString.CopyFrom(bytes);
IEnumerable<ByteString> byteStrings = new List<ByteString> { byteString };
var fileDescriptor = (IList<FileDescriptor>)FileDescriptor.BuildFromByteStrings(byteStrings);


// var set = new FileDescriptorSet();
// set.Add("my.proto", true);
// set.Process();

// Now you can use fileDescriptor in your code

var validatorOptions = new ProtoValidate.ValidatorOptions() {
    // This setting is used to configure if it loads your validation descriptors upon creation of the validator.
    // True will load on creation
    // False will defer loading the validator until first run of the validation logic for that type.
    PreLoadDescriptors = true,

    // This setting will cause a compilation exception to be thrown if the message type you are validating hasn't been pre-loaded using the file descriptor list.
    DisableLazy = true,

    //register your file descriptors generated by Google.Protobuf library for your compiled .proto files
    // FileDescriptors = new List<FileDescriptor>() {
    //    // your list of Protobuf File Descriptors here
    //    fileDescriptor
    // }
    FileDescriptors = fileDescriptor,

};

// var v= TestReflection.Descriptor;
//Instantiate the validator.  You should cache the validator for reuse.
var validator = new ProtoValidate.Validator(validatorOptions);

// flag to indicate if the validator should return on the first error (true) or validate all the fields and return all the errors in the message (false).
var failFast = true;

// define your Protobuf message that needs validation
// var myMessageToValidate = new MyMessageThatNeedsValidation() {...};

//validate the message
var violations = validator.Validate(student, failFast);

//the violations contains the validation errors.
var hasViolations = violations.Violations.Count > 0;

var result = hasViolations ? "Failed" : "Passed";
Console.WriteLine("Result: {0}", result);
Console.WriteLine("Violations: {0}", violations.Violations.Count);

foreach(var violation in violations.Violations)
{
    Console.WriteLine("Violation: {0}", violation);
}