using Google.Protobuf.Reflection;
using ProtoModels;
using System.Collections.Generic;
using Google.Protobuf;
using Google.Protobuf.WellKnownTypes;


var bytes = File.ReadAllBytes("Protoset/user.protoset");

ByteString byteString = ByteString.CopyFrom(bytes);
IEnumerable<ByteString> byteStrings = new List<ByteString> { byteString };
var fileDescriptor = (IList<FileDescriptor>)FileDescriptor.BuildFromByteStrings(byteStrings);


var validatorOptions = new ProtoValidate.ValidatorOptions() {
    // This setting is used to configure if it loads your validation descriptors upon creation of the validator.
    // True will load on creation
    // False will defer loading the validator until first run of the validation logic for that type.
    PreLoadDescriptors = true,

    // This setting will cause a compilation exception to be thrown if the message type you are validating hasn't been pre-loaded using the file descriptor list.
    DisableLazy = true,

    //register your file descriptors generated by Google.Protobuf library for your compiled .proto files
    FileDescriptors = fileDescriptor,
};

//Instantiate the validator.  You should cache the validator for reuse.
var validator = new ProtoValidate.Validator(validatorOptions);

// flag to indicate if the validator should return on the first error (true) or validate all the fields and return all the errors in the message (false).
var failFast = true;

// define your Protobuf message that needs validation
var student = new Student{ Age = 19 };

//validate the message
var violations = validator.Validate(student, failFast);

//the violations contains the validation errors.
var hasViolations = violations.Violations.Count > 0;

var result = hasViolations ? "Failed" : "Passed";
Console.WriteLine("Result: {0}", result);
Console.WriteLine("Violations: {0}", violations.Violations.Count);

foreach(var violation in violations.Violations)
{
    Console.WriteLine("Violation: {0}", violation);
}

/*
Output:
Result: Failed
Violations: 1
Violation: { "message": "No evaluator available for my.package.Student." }
*/